#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "--all setup add-plugin run start ws-update ws-reverse ws-reverse-add create-script import help"
  elif [ "${2}" = "--all" ]
  then
    shortlist3="setup add-plugin run start ws-update ws-reverse ws-reverse-add create-script import help"
    if [ -z "${3}" ] || [[ ! " ${shortlist3} " == *" ${3} "* ]]
    then
      echo "${shortlist3}"
    fi
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
L_PWD=$(pwd)
cd "${DEVON_IDE_HOME}" || exit 255

# Install Eclipse plugins by feature group id
# $1: plugin feature group ID
# $2: plugin URL (update site)
function doInstallEclipsePlugin() {
  # Remove feature.group from each plugin id
  local plugins="${1//.feature.group/}"
  echo "Installing Eclipse plugin '${plugin_name}' from URL ${2}"

  if [ -z "${plugins}" ]
  then
    doEcho "No plugins to install."
    return
  fi

  doCheckPluginsInstalled "${plugins}"

  # Try installing the plugin and get the debug information from the executed command
  # shellcheck disable=SC2086
  "${ECLIPSE_HOME}/eclipse" -consoleLog -nosplash -vm "${ECLIPSE_JAVA_HOME}/bin/java" -application org.eclipse.equinox.p2.director -repository "${2}" -installIU "${1}" -tag InitialState -profileProperties org.eclipse.update.install.features=true -vmargs ${ECLIPSE_VMARGS}
  local exit_code=$?

  #if [[ "${debug_info}" == *"Overall install request is satisfiable"* ]] || [ "${exit_code}" == 0 ]; then
  if [ "${exit_code}" == 0 ]; then
    return 0
  else
    echo
    doError "Installation of plugin '${plugin_name}' failed. Please try installing the plugin manually or running setup again (devon eclipse setup)."
    if [ -n "${plugin_dependencies}" ]
    then
      plugin_dependencies=$(echo -e "${plugin_dependencies}" | sort -u)
      doWarning "Plugin '${plugin_name}' might be already installed, because of existing dependencies: ${plugin_dependencies} \nMake sure the plugin is not installed yet by checking the list of installed plugins in the Eclipse IDE. If there's an error and the issue persists, try to remove the plugin manually from the plugins folder or uninstall it with devon remove-plugin command."
    fi
    echo
    return ${exit_code}
  fi
}

# Check if the plugins are already installed by looking at the eclipse/plugins folder
# $1: plugin feature group ID
# return: dependencies that are already installed
function doCheckPluginsInstalled() {
  local plugin_dir="${DEVON_IDE_HOME}/software/eclipse/plugins"

  # Remove spaces from plugin variable
  plugins="${1// /}"
  # Iterate each plugin via comma seperation
  IFS=',' read -ra plugins_arr <<< "${plugins}"
  for plugin in "${plugins_arr[@]}"; do
    # Remove feature from plugin variable
    plugin=${plugin/\.feature*/}
    plugin_dependencies=$(ls -1 "${plugin_dir}" | grep -o -E "${plugin}\..*\.jar")
    # Remove last word after dot
    while [[ "${plugin}" == *.* ]]; do
      if [ ${plugin} == "org.eclipse" ] || [ ${plugin} == "org.apache" ] || [ ${plugin} == "com" ] || [ ${plugin} == "org" ] || [ ${plugin} == "net" ]; then
        break
      fi
      new_plugin_dependencies=$(ls -1 "${plugin_dir}" | grep -o -E "${plugin}\..*\.jar")
      if [ -n "${new_plugin_dependencies}" ] 
      then
        plugin_dependencies="${plugin_dependencies}\n${new_plugin_dependencies}"
      fi
      plugin=${plugin%.*}
    done
  done 
}

# Remove plugins from Eclipse by feature group ID
# It first removes .installed filed if such exists, then removes the plugin via eclipe command
function doRemovePlugin() {
  if [ -z "${1}" ]
  then
    doError "No plugin was specified for removal."
    return 1
  fi
  if [ -f "${ECLIPSE_HOME}/.devon.${1}.installed" ]
  then
    rm "${ECLIPSE_HOME}/.devon.${1}.installed"
  fi

  doLoadPluginProperties "${1}"
  if [ -n "${plugin_id}" ] 
  then
    doEcho "Removing plugin ${1}..."
    # shellcheck disable=SC2086
    local debug_info=$("${ECLIPSE_HOME}/eclipsec" -nosplash -clean -consoleLog -vm "${ECLIPSE_JAVA_HOME}/bin/java" -application org.eclipse.equinox.p2.director -uninstallIU "${plugin_id}" -vmargs ${ECLIPSE_VMARGS})

    doCheckPluginsInstalled "${plugin_id}"
    plugin_id="${plugin_id// /}"
    IFS=',' read -ra plugin_id_arr <<< "${plugin_id}"
    for plugin in ${plugin_id_arr[@]}; do
      # If debug_info contains words The installable unit could not be found, then the plugin was not uninstalled correctly
      if [[ "${debug_info}" == *"The installable unit ${plugin} has not been found"* ]]
      then
        doError "Plugin ${plugin} couldn't be removed from your Eclipse installation as it was not found. Please check if the plugin exists and try to remove it manually."
        if [ -n "${plugin_dependencies}" ]
        then
          plugin_dependencies=$(echo -e "${plugin_dependencies}" | sort -u)
          doWarning "If the problem persists, try removing the following dependencies: ${plugin_dependencies}"
        fi
        return 1
      fi
    done
    doSuccess "Plugin ${1} removed successfully."
  fi
}


function doSetup() {
  doDevonCommand java setup silent
  if [ "${1}" != "silent" ] || [ ! -d "${ECLIPSE_HOME}" ]
  then
    local version="${ECLIPSE_VERSION:-2022-03}"
    local javaVersion="${EXTRA_JAVA_VERSION}"
    if [ -z "${javaVersion}" ]
    then
      javaVersion="${JAVA_VERSION}"
    fi
    if [ -n "${javaVersion}" ]
    then
      doVersionCompare "${javaVersion}" "11u0"
      if [ "${?}" == 2 ]
      then
        # Java version is lower than 11
        doVersionCompare "${version}" "2020-09"
        if [ "${?}" != 2 ]
        then
          # Eclipse version is >= 2020-09
          doConfirmWarning "You are using eclipse version ${version} that requires Java 11 or newer.\nHowever, [EXTRA_]JAVA_VERSION is ${javaVersion} - in this setup eclipse can not work.\nPlease update JAVA_VERSION, set EXTRA_JAVA_VERSION or downgrade ECLIPSE_VERSION in your settings/devon.properties!"
        fi
      fi
    fi
    doInstall "-" "${ECLIPSE_HOME}" "eclipse" "${version}" "${ECLIPSE_EDITION_TYPE:-java}"
    if doIsMacOs
    then
      if [ ! -x "${ECLIPSE_HOME}/eclipse" ]
      then
        echo "Doing workarounds for MacOS quirks..."
        echo -e "#!/usr/bin/env bash\nECLIPSE_HOME=\"\$(dirname \"\${0}\")\"\n\"\${ECLIPSE_HOME}/Eclipse.app/Contents/MacOS/eclipse\" \$@" > "${ECLIPSE_HOME}/eclipse"
        chmod a+x "${ECLIPSE_HOME}/eclipse"
      fi
    fi
    doAddPlugins
  fi
  if [ ! -x "${ECLIPSE_HOME}/eclipse" ]
  then
    doFail "Eclipse binary is not available in ${ECLIPSE_HOME}"
  fi
  if [ "${1}" != "silent" ] && ! doIsQuiet
  then
    local eclipseproduct="${ECLIPSE_HOME}/Eclipse.app/Contents/Eclipse/.eclipseproduct"
    if [ ! -e "${eclipseproduct}" ]
    then
      eclipseproduct="${ECLIPSE_HOME}/.eclipseproduct"
    fi
    doRunCommand "cat '${eclipseproduct}'"
  fi
}

# $1: plugin config properties file
function doAddPluginFromConfig() {
  if [ -f "${1}" ]
  then
    doLoadPluginProperties "${1}"
    local url
    if [ -n "${plugin_mirror_url}" ]
    then
      url="${plugin_mirror_url}"
    else
      url="${plugin_url}"
    fi
    if [ "${plugin_active}" = "true" ] || [ -n "${2}" ]
    then
      # check if plugin successfully installed
      local plugin_fileprefix="${1/*\//}"
      plugin_fileprefix="${plugin_fileprefix/.properties/}"
      local install_file="${ECLIPSE_HOME}/.devon.${plugin_fileprefix}.installed"
      if [ ! -e "${install_file}" ]
      then
        doInstallEclipsePlugin "${plugin_id}" "${url}"
        result_rc=$?
        if [ "${result_rc}" = 0 ]
        then
          touch "${install_file}"
          doSuccess "Plugin ${plugin_name} installed successfully."
        fi
      else
        doEcho "Plugin ${plugin_name} is already installed. Use 'devon eclipse remove-plugin ${plugin_name}' if you want to remove it."
      fi
    fi
  elif [ -n "${2}" ]
  then
    doFail "Undefined plugin ID ${1} - not known or supported.\nProvide full groupId together with URL of update-site."
  fi
}

function doAddPlugins() {
  if [ -d "${SETTINGS_PATH}"/eclipse/plugins ]
  then
    local file
    for file in "${SETTINGS_PATH}"/eclipse/plugins/*.properties
    do
      doAddPluginFromConfig "${file}"
    done
  else
    doWarning "Legacy eclipse plugin mechanism detected. Please migrate to ${SETTINGS_PATH}/eclipse/plugins:\nhttps://github.com/devonfw/ide/blob/master/documentation/eclipse.asciidoc"
    if [ -z "${ECLIPSE_PLUGINS}" ]
    then
      doAddPlugin startexplorer
      doAddPlugin regexutil
      doAddPlugin templatevariables
      doAddPlugin spotbugs
      doAddPlugin checkstyle
      doAddPlugin cobigen
      doAddPlugin terminal
    else
      for ((i=0; i<${#ECLIPSE_PLUGINS[*]}; i=i+2))
      do
        doAddPlugin "${ECLIPSE_PLUGINS[${i}]}" "${ECLIPSE_PLUGINS[((${i}+1))]}"
      done
    fi
  fi
}

function doConfigureEclipse() {
  local mode="${1}"
  if [ ! -d "${WORKSPACE_PATH}/.metadata" ]
  then
    if [ -z "${mode}" ]
    then
      mode="-u"
    elif [ "${mode}" != "-u" ]
    then
      doFail "Workspace ${WORKSPACE} is not initialized.\nReverse merge is not possible."
    fi
  fi
  if [ -n "${mode}" ]
  then
    doConfigureWorkspace "${SETTINGS_PATH}/eclipse/workspace" "${WORKSPACE_PATH}" ${mode}
  fi
}

# $1: id
# $2: optional URL
function doAddPlugin() {
  plugin_name="${1}"
  if [ -z "${2}" ]
  then
    doAddPluginFromConfig "${SETTINGS_PATH}/eclipse/plugins/${1}.properties" "force-manual"
  else
    doInstallEclipsePlugin "${1}" "${2}"
  fi
}

function doStartEclipse() {
  doConfigureEclipse -u
  echo "launching Eclipse in workspace ${WORKSPACE} at ${WORKSPACE_PATH}"
  if doIsWindows
  then
    # shellcheck disable=SC2086
    start "eclipse" /B "${ECLIPSE_HOME}/eclipsec" -clean -data "${WORKSPACE_PATH}" -keyring ~/.eclipse/.keyring -vm "${ECLIPSE_JAVA_HOME}/bin/javaw" -showlocation "${WORKSPACE}" -vmargs ${ECLIPSE_VMARGS}
  else
    # shellcheck disable=SC2086
    "${ECLIPSE_HOME}/eclipse" -clean -data "${WORKSPACE_PATH}" -keyring ~/.eclipse/.keyring -vm "${ECLIPSE_JAVA_HOME}/bin/java" -showlocation "${DEVON_IDE_HOME/*\//}/${WORKSPACE}" -vmargs ${ECLIPSE_VMARGS} &
  fi
}

function doCheckAndInstallGroovy() {
  local groovy_version=3.0.1
  if [ ! -f "${M2_REPO}/org/codehaus/groovy/groovy-ant/${groovy_version}/groovy-ant-${groovy_version}.jar" ] || [ ! -f "${M2_REPO}/org/codehaus/groovy/groovy/${groovy_version}/groovy-${groovy_version}.jar" ]; then
    echo "Groovy not found. Installing version ${groovy_version} in Maven repository ${M2_REPO}..."
    doRunCommand "mvn org.apache.maven.plugins:maven-dependency-plugin:2.10:get -Dartifact=org.codehaus.groovy:groovy-ant:${groovy_version}:jar -DremoteRepositories=https://mvnrepository.com"
  fi
}

function doImportEclipse() {
  if [ -z "${1}" ]
  then
    doFail "Parameter \"path\" is missing."
  fi
  doConfigureEclipse
  doCheckAndInstallGroovy
  if [[ "${1}" = /* ]]
  then
    importPath="${1}"
  else
    # Path is relative make it absolute
    importPath="${L_PWD}/${1}"
  fi
  importWorkingSets="${2}"
  echo "Starting eclipse import for ${importPath} into workspace ${WORKSPACE} at ${WORKSPACE_PATH}"
  # shellcheck disable=SC2086
  "${ECLIPSE_HOME}/eclipse" -nosplash -vm "${ECLIPSE_JAVA_HOME}/bin/java" -application org.eclipse.ant.core.antRunner -buildfile "${DEVON_IDE_HOME}/scripts/lib_script/import.xml" -data "${WORKSPACE_PATH}" -keyring ~/.eclipse/.keyring -vm "${ECLIPSE_JAVA_HOME}/bin/java" -vmargs -DdevonImportPath="${importPath}" -DdevonImportWorkingSet="${importWorkingSets}" ${ECLIPSE_VMARGS} 
}

# $1: id
# $2: optional plugin URL (update site)
function doMirrorUpdateSite() {
  if [ -z "${1}" ]
  then
    doFail "Parameter \"id\" is missing."
  fi
  local url
  if [ -n "${2}" ]
  then
    url="${2}"
  else
    doLoadPluginProperties "${1}"
    url="${plugin_url}"
  fi
  local timestamp
  timestamp=$(date +'%Y-%m-%d')
  "${ECLIPSE_HOME}/eclipse" -nosplash -vm "${ECLIPSE_JAVA_HOME}/bin/java" -application org.eclipse.equinox.p2.metadata.repository.mirrorApplication -source "${url}" -destination "${DEVON_DOWNLOAD_DIR}/update-sites/${1}-${timestamp}" -vmargs "${ECLIPSE_VMARGS}"
  "${ECLIPSE_HOME}/eclipse" -nosplash -vm "${ECLIPSE_JAVA_HOME}/bin/java" -application org.eclipse.equinox.p2.artifact.repository.mirrorApplication -source "${url}" -destination "${DEVON_DOWNLOAD_DIR}/update-sites/${1}-${timestamp}" -vmargs "${ECLIPSE_VMARGS}"
  local result="${?}"
  if [ "${result}" != 0 ]
  then
    doEchoAttention "Mirroring of the update-site ${url} failed. Please check the URL or rerun setup (devon eclipse setup)."
  fi
  return "${result}"
}

function doLoadPluginProperties() {
  local file="${1}"
  if [ ! -f "${1}" ]
  then
    file="${SETTINGS_PATH}/eclipse/plugins/${1}.properties"
  fi
  if [ -f  "${file}" ]
  then
    plugin_id=""
    plugin_active="true"
    plugin_url=""
    plugin_mirror_url=""
    doLoadProperties "${file}"
    if [ -z "${plugin_id}" ] || [ -z "${plugin_url}" ]
    then
      doFail "Invalid eclipse plugin config: ${file}"
    fi
  fi
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Manage Eclipse IDE and workspace."
  echo
  echo "Arguments:"
  echo " --all                           if provided as first arg then to command will be invoked for each workspace"
  echo " setup                           setup Eclipse (install or update)"
  echo " add-plugin «id» [«url»]         install an additional plugin"
  echo " remove-plugin «id»              remove an installed plugin"
  echo " run | start                     launch Eclipse IDE (default if no argument is given)"
  echo " ws-up[date]                     update eclipse workspace"
  echo " ws-re[verse]                    reverse merge changes from workspace into settings"
  echo " ws-reverse-add                  reverse merge adding new properties"
  echo " create-script                   create eclipse-${WORKSPACE} script if not already exists"
  echo " import «path» [«workingsets»]   import projects in «path» into current workspace. «workingsets» comma-separated list of workingsets (no spaces between ,), eg: ./myproject ws1,ws2"
  echo " mirror «id» [«url»]             mirror the content of an update-site"
  exit
fi
ECLIPSE_HOME="${DEVON_IDE_HOME}/software/eclipse"
ECLIPSE_JAVA_HOME="${JAVA_HOME}"
if [ -n "${EXTRA_JAVA_VERSION}" ]
then
  ECLIPSE_JAVA_HOME="${DEVON_IDE_HOME}/software/extra/java"
fi
if [ -z "${1}" ]
then
  doSetup silent
  doStartEclipse
elif [ "${1}" = "setup" ]
then
  doSetup "${2}"
  exit
fi
if [ "${1}" = "--all" ]
then
  shift
  doDevonCommandAllWorkspaces eclipse "${@}"
fi
while [ -n "${1}" ]
do
  if [ "${1}" = "run" ] || [ "${1}" = "start" ]
  then
    doSetup silent
    doStartEclipse
  elif [ "${1}" = "ws-up" ] || [ "${1}" = "ws-update" ]
  then
    doConfigureEclipse -u
  elif [ "${1}" = "ws-re" ] || [ "${1}" = "ws-reverse" ]
  then
    doConfigureEclipse -i
  elif [ "${1}" = "ws-reverse-add" ]
  then
    doConfigureEclipse -x
  elif [ "${1}" = "create-script" ]
  then
    doCreateIdeScript eclipse
  elif [ "${1}" = "add-plugin" ]
  then
    shift
    doAddPlugin "${@}"
    exit ${?}
  elif [ "${1}" = "remove-plugin" ]
  then
    shift
    doRemovePlugin "${@}"
    exit ${?}
  elif [ "${1}" = "import" ] 
  then
    doImportEclipse "${2}" "${3}"
    exit ${?}
  elif [ "${1}" = "mirror" ]
  then
    shift
    doMirrorUpdateSite "${@}"
    exit ${?}
  else
    doFail "Unknown argument: ${1}"
  fi
  shift
done
